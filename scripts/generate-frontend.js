/**
 * Generate frontend assets from backend configuration and logic
 * Consolidates config and URL generation for simpler build process
 */

const fs = require('fs');
const path = require('path');

const yaml = require('js-yaml');

// Load environment-specific configuration using backend system
const env = process.env.NODE_ENV || 'staging';
const { loadConfig } = require('../config');

/**
 * Generate frontend configuration
 */
function generateFrontendConfig() {
  // Get full backend configuration (passing NODE_ENV as parameter for proper detection)
  const fullConfig = loadConfig({ NODE_ENV: env });

  // Create frontend-safe configuration with only actively used settings
  const frontendConfig = {
    environment: fullConfig.environment,

    // Runtime configuration - ACTIVELY USED by URL functions
    runtime: {
      ...fullConfig.runtime,
      package: fullConfig.runtime.package || 'kukla-integration-service',
      version: fullConfig.runtime.version || 'v1',
      paths: fullConfig.runtime.paths || {
        base: '/api',
        web: '/web',
      },
      // Keep baseUrl and namespace separate for flexible URL building
      baseUrl: fullConfig.runtime.baseUrl,
      namespace: fullConfig.runtime.namespace,
      actions: generateActionMappings(),
    },

    // Performance configuration - USED by HTMX timeout settings
    performance: {
      timeout: fullConfig.performance?.timeout || 30000,
      maxExecutionTime: fullConfig.performance?.maxExecutionTime || 30000,
    },
  };

  // Frontend configuration content (ES6 module)
  const frontendConfigContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated from backend configuration for ${env} environment
 * Sensitive data (credentials) is excluded for security
 */

export default ${JSON.stringify(frontendConfig, null, 2)};
`;

  // Ensure directory exists
  const frontendConfigDir = path.resolve(__dirname, '../web-src/src/config/generated');
  if (!fs.existsSync(frontendConfigDir)) {
    fs.mkdirSync(frontendConfigDir, { recursive: true });
  }

  // Write frontend configuration
  fs.writeFileSync(path.resolve(frontendConfigDir, 'config.js'), frontendConfigContent);
}

/**
 * Generate action mappings from app.config.yaml
 */
function generateActionMappings() {
  try {
    const appConfig = yaml.load(
      fs.readFileSync(path.resolve(__dirname, '../app.config.yaml'), 'utf8')
    );
    const actions = Object.keys(
      appConfig.application.runtimeManifest.packages['kukla-integration-service'].actions
    );

    return actions.reduce((acc, action) => {
      acc[action] = action;
      return acc;
    }, {});
  } catch (error) {
    console.warn('Could not load actions from app.config.yaml:', error.message);
    return {
      'get-products': 'get-products',
      'download-file': 'download-file',
      'browse-files': 'browse-files',
      'delete-file': 'delete-file',
    };
  }
}

/**
 * Generate frontend URL module
 */
function generateFrontendUrl() {
  // Read the backend URL building logic
  const backendUrlPath = path.resolve(__dirname, '../src/core/url/index.js');
  const backendUrlCode = fs.readFileSync(backendUrlPath, 'utf8');

  // Extract the buildActionUrl function from backend code
  const buildActionUrlMatch = backendUrlCode.match(/function buildActionUrl\([\s\S]*?\n\}/);

  if (!buildActionUrlMatch) {
    throw new Error('Could not find buildActionUrl function in backend code');
  }

  let buildActionUrlCode = buildActionUrlMatch[0];

  // Convert CommonJS-style function to ES6 module format
  buildActionUrlCode = buildActionUrlCode.replace(
    'function buildActionUrl(',
    'export function buildActionUrl('
  );

  // Generate the complete frontend URL module
  const frontendUrlContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * Frontend URL building logic generated from backend implementation
 * This ensures consistent URL handling between backend and frontend
 */

import { getRuntimeConfig } from '../config/index.js';

${buildActionUrlCode}

/**
 * Get the URL for an action with parameters
 * @param {string} action - The action name
 * @param {Object} [params] - URL parameters
 * @returns {string} The action URL
 * @throws {Error} If the action is unknown
 */
export function getActionUrl(action, params = {}) {
  const runtimeConfig = getRuntimeConfig();

  // Check if action exists in configuration
  if (!runtimeConfig.actions || !runtimeConfig.actions[action]) {
    throw new Error(\`Unknown action: \${action}\`);
  }

  // Determine if we should use relative URLs
  const useRelative = !runtimeConfig.baseUrl || runtimeConfig.baseUrl === '';

  return buildActionUrl(runtimeConfig, action, {
    absolute: !useRelative,
    params,
  });
}

/**
 * Get the download URL for a file
 * @param {string} fileName - The name of the file
 * @param {string} [path] - Optional path to the file
 * @returns {string} The download URL
 */
export function getDownloadUrl(fileName, path) {
  return getActionUrl('download-file', {
    fileName,
    path,
  });
}

/**
 * Get the delete URL for a file
 * @param {string} fileName - The name of the file
 * @param {string} [path] - Optional path to the file
 * @returns {string} The delete URL
 */
export function getDeleteUrl(fileName, path) {
  return getActionUrl('delete-file', {
    fileName,
    path,
  });
}

/**
 * Build download URL for files with proper encoding
 * @param {string} filePath - File path to download
 * @returns {string} Download URL
 */
export function buildDownloadUrl(filePath) {
  return getActionUrl('download-file', {
    filePath: encodeURIComponent(filePath),
  });
}

/**
 * Get configuration for debugging
 * @returns {Object} Current configuration
 */
export function getConfig() {
  return getRuntimeConfig();
}
`;

  // Ensure directory exists
  const frontendUrlDir = path.resolve(__dirname, '../web-src/src/js/core/url');
  if (!fs.existsSync(frontendUrlDir)) {
    fs.mkdirSync(frontendUrlDir, { recursive: true });
  }

  // Write generated frontend URL module
  fs.writeFileSync(path.resolve(frontendUrlDir, 'index.js'), frontendUrlContent);
}

/**
 * Main execution
 */
function main() {
  try {
    generateFrontendConfig();
    generateFrontendUrl();
    console.log(`✅ Generated frontend (${env.charAt(0).toUpperCase() + env.slice(1)})`);
  } catch (error) {
    console.error('❌ Frontend generation failed:', error.message);
    process.exit(1);
  }
}

main();
