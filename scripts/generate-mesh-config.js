/**
 * Generate Mesh Configuration from Main Config System
 * @module scripts/generate-mesh-config
 *
 * This script eliminates duplication by generating mesh-config.js
 * from our main configuration system. The mesh resolver will use
 * the EXACT same URLs, paths, and settings as our actions.
 */

const fs = require('fs');
const path = require('path');

// Import our actual configuration system
const productionConfig = require('../config/environments/production');
const stagingConfig = require('../config/environments/staging');

/**
 * Generate mesh configuration from main config
 * @param {string} environment - Target environment
 * @returns {Object} Mesh-compatible configuration
 */
function generateMeshConfig(environment = 'staging') {
  const config = environment === 'production' ? productionConfig : stagingConfig;

  return {
    environment,
    commerce: {
      // Use EXACT same base URL from main config
      baseUrl: config.commerce.baseUrl,

      // Build full API paths using main config paths
      paths: {
        adminToken: config.commerce.baseUrl + '/rest/V1' + config.commerce.paths.adminToken,
        products: config.commerce.baseUrl + '/rest/V1' + config.commerce.paths.products,
        stockItems: config.commerce.baseUrl + '/rest/V1/stockItems', // Use correct path for mesh
        categories: config.commerce.baseUrl + '/rest/V1' + config.commerce.paths.categories,
      },

      // Use EXACT same timeout and retry settings
      timeout: config.commerce.timeout,
      retries: config.commerce.retries,

      // Use main config pagination settings
      pagination: {
        defaultPageSize: config.products.perPage,
        maxPages: Math.ceil(config.products.maxTotal / config.products.perPage),
        categoryPageSize: 100, // Default for categories
      },
    },

    // Mesh-specific settings (not duplicated)
    mesh: {
      endpoint: config.mesh?.endpoint,
      timeout: config.mesh?.timeout || 30000,
    },
  };
}

/**
 * Format JSON with single quotes and trailing commas for ESLint
 * @param {Object} obj - Object to format
 * @returns {string} Formatted JSON string
 */
function formatConfig(obj) {
  return JSON.stringify(obj, null, 2)
    .replace(/"/g, "'")
    .replace(/(\w+|'[^']*'): /g, '$1: ')
    .replace(/([^,\s])\s*\n(\s*[\]}])/g, '$1,\n$2');
}

/**
 * Generate the mesh-config.js file content
 * @param {Object} stagingConfig - Staging configuration
 * @param {Object} productionConfig - Production configuration
 * @returns {string} JavaScript file content
 */
function generateMeshConfigFile(stagingConfig, productionConfig) {
  return `/**
 * AUTO-GENERATED Mesh Configuration
 * @module mesh-config
 * 
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 * 
 * This file is automatically generated from our main configuration system.
 * To make changes, update config/base.js or config/environments/*.js
 * and run: npm run generate:mesh-config
 * 
 * Generated on: ${new Date().toISOString()}
 */

// Configuration constants generated from main config system
const ENVIRONMENTS = {
  staging: ${formatConfig(stagingConfig)},
  production: ${formatConfig(productionConfig)}
};

/**
 * Get environment from context or default to staging
 * @param {Object} context - GraphQL context (may contain headers)
 * @returns {string} Environment name
 */
function getEnvironment(context = {}) {
  // Try to get environment from custom headers
  if (context.headers) {
    const env = context.headers['x-environment'] || 
                context.headers['x-commerce-environment'] ||
                context.headers['x-mesh-environment'];
    if (env && ENVIRONMENTS[env]) return env;
  }
  
  // Default to staging
  return 'staging';
}

 /**
  * Get Commerce credentials from context headers or environment variables
  * @param {Object} context - GraphQL context (may contain headers)
  * @returns {Object} Credentials object
  */
 function getCommerceCredentials(context = {}) {
   // 1. Try custom headers (preferred for API calls)
   if (context.headers) {
     const username = context.headers['x-commerce-username'];
     const password = context.headers['x-commerce-password'];
     if (username && password) {
       return { username, password };
     }
   }
   
   // 2. Try environment variables (for development/testing)
   if (typeof process !== 'undefined' && process.env) {
     const username = process.env.COMMERCE_ADMIN_USERNAME;
     const password = process.env.COMMERCE_ADMIN_PASSWORD;
     if (username && password) {
       return { username, password };
     }
   }
   
   // 3. No credentials available - provide helpful error
   throw new Error(
     'Commerce credentials not found. Provide via: ' +
     '(1) Headers: x-commerce-username, x-commerce-password OR ' +
     '(2) Environment: COMMERCE_ADMIN_USERNAME, COMMERCE_ADMIN_PASSWORD'
   );
 }

/**
 * Get configuration object for mesh resolvers
 * @param {Object} context - GraphQL context
 * @returns {Object} Configuration object
 */
function getMeshConfig(context = {}) {
  const environment = getEnvironment(context);
  const envConfig = ENVIRONMENTS[environment];
  const credentials = getCommerceCredentials(context);
  
  return {
    environment,
    commerce: envConfig.commerce,
    auth: credentials,
    mesh: envConfig.mesh,
  };
}

// Environment detection for API Mesh vs Node.js
const isAPIMesh = typeof module === 'undefined' || !module.exports;

// Export for different environments
if (isAPIMesh) {
  // API Mesh environment - make functions globally available
  globalThis.MeshConfig = {
    getMeshConfig,
    getCommerceCredentials,
    getEnvironment,
    ENVIRONMENTS,
  };
} else {
  // Node.js environment
  module.exports = {
    getMeshConfig,
    getCommerceCredentials,
    getEnvironment,
    ENVIRONMENTS,
  };
}
`;
}

/**
 * Main generation function
 */
function main() {
  try {
    // Generate configurations for both environments
    const stagingMeshConfig = generateMeshConfig('staging');
    const productionMeshConfig = generateMeshConfig('production');

    // Generate the JavaScript file content
    const fileContent = generateMeshConfigFile(stagingMeshConfig, productionMeshConfig);

    // Write the generated file
    const outputPath = path.join(__dirname, '..', 'mesh-config.js');
    fs.writeFileSync(outputPath, fileContent, 'utf8');

    // Simple output matching other build scripts
    console.log('✅ Generated mesh configuration (Staging/Production)');
  } catch (error) {
    console.error('❌ Failed to generate mesh configuration:', error.message);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { generateMeshConfig, generateMeshConfigFile, main };
