/**
 * Generate runtime configuration from app.config.yaml and environment config
 */

const fs = require('fs');
const path = require('path');

const yaml = require('js-yaml');

// Load environment-specific configuration
const env = process.env.NODE_ENV || 'staging';
const envConfig = require(`../config/environments/${env}`);

// Read app.config.yaml
const appConfig = yaml.load(fs.readFileSync(path.resolve(__dirname, '../app.config.yaml'), 'utf8'));

// Extract action names from config
const actions = Object.keys(
  appConfig.application.runtimeManifest.packages['kukla-integration-service'].actions
);

// Generate runtime configuration using environment-specific settings
const runtimeConfig = {
  runtime: {
    ...envConfig.url.runtime,
    actions: actions.reduce((acc, action) => {
      acc[action] = action;
      return acc;
    }, {}),
  },
};

// Backend configuration (CommonJS)
const backendConfigContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated from app.config.yaml and ${env} environment config
 */

module.exports = ${JSON.stringify(runtimeConfig, null, 2)};
`;

// Frontend configuration (ES6 module)
const frontendConfigContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated from app.config.yaml and ${env} environment config
 */

export default ${JSON.stringify(runtimeConfig, null, 2)};
`;

// Ensure directories exist
const backendConfigDir = path.resolve(__dirname, '../config/generated');
const frontendConfigDir = path.resolve(__dirname, '../web-src/src/config/generated');

if (!fs.existsSync(backendConfigDir)) {
  fs.mkdirSync(backendConfigDir, { recursive: true });
}
if (!fs.existsSync(frontendConfigDir)) {
  fs.mkdirSync(frontendConfigDir, { recursive: true });
}

// Write backend runtime configuration (CommonJS)
fs.writeFileSync(path.resolve(backendConfigDir, 'runtime.config.js'), backendConfigContent);

// Write frontend runtime configuration (ES6 module)
fs.writeFileSync(path.resolve(frontendConfigDir, 'runtime.config.js'), frontendConfigContent);
