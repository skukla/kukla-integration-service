/**
 * Generate frontend configuration from backend config
 * Only includes settings actively used by frontend code
 * Excludes sensitive credentials for security
 */

const fs = require('fs');
const path = require('path');

const yaml = require('js-yaml');

// Load environment-specific configuration using backend system
const env = process.env.NODE_ENV || 'staging';
const { loadConfig } = require('../config');

// Get full backend configuration (without sensitive params)
const fullConfig = loadConfig();

// Create frontend-safe configuration with only actively used settings
function createFrontendConfig(config) {
  return {
    environment: config.environment,

    // Runtime configuration - ACTIVELY USED by URL functions
    runtime: {
      ...config.runtime,
      package: config.runtime.package || 'kukla-integration-service',
      version: config.runtime.version || 'v1',
      paths: config.runtime.paths || {
        base: '/api',
        web: '/web',
      },
      actions: generateActionMappings(),
    },

    // Performance configuration - USED by HTMX timeout settings
    performance: {
      timeout: config.performance?.timeout || 30000,
      maxExecutionTime: config.performance?.maxExecutionTime || 30000,
    },
  };
}

// Generate action mappings from app.config.yaml
function generateActionMappings() {
  try {
    const appConfig = yaml.load(
      fs.readFileSync(path.resolve(__dirname, '../app.config.yaml'), 'utf8')
    );
    const actions = Object.keys(
      appConfig.application.runtimeManifest.packages['kukla-integration-service'].actions
    );

    return actions.reduce((acc, action) => {
      acc[action] = action;
      return acc;
    }, {});
  } catch (error) {
    console.warn('Could not load actions from app.config.yaml:', error.message);
    return {
      'get-products': 'get-products',
      'download-file': 'download-file',
      'browse-files': 'browse-files',
      'delete-file': 'delete-file',
    };
  }
}

// Generate the frontend configuration
const frontendConfig = createFrontendConfig(fullConfig);

// Frontend configuration content (ES6 module)
const frontendConfigContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated from backend configuration for ${env} environment
 * Sensitive data (credentials) is excluded for security
 */

export default ${JSON.stringify(frontendConfig, null, 2)};
`;

// Ensure directory exists
const frontendConfigDir = path.resolve(__dirname, '../web-src/src/config/generated');
if (!fs.existsSync(frontendConfigDir)) {
  fs.mkdirSync(frontendConfigDir, { recursive: true });
}

// Write frontend configuration
fs.writeFileSync(path.resolve(frontendConfigDir, 'config.js'), frontendConfigContent);

console.log(`‚úÖ Generated frontend configuration for ${env} environment`);
console.log('üìÅ Location: web-src/src/config/generated/config.js');
console.log('üîí Sensitive data excluded for security');
