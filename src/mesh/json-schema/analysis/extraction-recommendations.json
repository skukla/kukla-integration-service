{
  "phase2Implementation": {
    "approach": "Extract utilities first, then create source-specific resolvers",
    "priority": "HIGH",
    "timeline": "Days 5-7"
  },
  "utilityExtraction": {
    "highPriority": [
      {
        "category": "OAuth Authentication",
        "description": "OAuth 1.0 authentication with HMAC-SHA256 signatures",
        "functions": [
          {
            "name": "createOAuthHeader",
            "purpose": "OAuth 1.0 authorization header creation",
            "reusability": "HIGH",
            "complexity": "HIGH",
            "dependencies": [
              "crypto",
              "TextEncoder",
              "URLSearchParams"
            ],
            "usedBy": [
              "Products",
              "Categories"
            ]
          },
          {
            "name": "extractOAuthCredentials",
            "purpose": "OAuth credentials extraction from context",
            "reusability": "HIGH",
            "complexity": "MEDIUM",
            "dependencies": [
              "crypto",
              "TextEncoder",
              "URLSearchParams"
            ],
            "usedBy": [
              "Products",
              "Categories"
            ]
          }
        ],
        "extractionPriority": "HIGH",
        "newLocation": "src/mesh/json-schema/utilities/oauth.js"
      },
      {
        "category": "Category Caching",
        "description": "In-memory caching for category data with TTL",
        "functions": [
          {
            "name": "getCachedCategory",
            "purpose": "Retrieve category from cache with TTL check",
            "reusability": "HIGH",
            "complexity": "LOW",
            "dependencies": [
              "Map",
              "Date"
            ],
            "usedBy": [
              "Categories",
              "Products (for enrichment)"
            ]
          },
          {
            "name": "cacheCategory",
            "purpose": "Store category in cache with timestamp",
            "reusability": "HIGH",
            "complexity": "LOW",
            "dependencies": [
              "Map",
              "Date"
            ],
            "usedBy": [
              "Categories",
              "Products (for enrichment)"
            ]
          },
          {
            "name": "buildCategoryMapFromCache",
            "purpose": "Build category map from cached data",
            "reusability": "HIGH",
            "complexity": "LOW",
            "dependencies": [
              "Map",
              "Date"
            ],
            "usedBy": [
              "Categories",
              "Products (for enrichment)"
            ]
          }
        ],
        "extractionPriority": "HIGH",
        "newLocation": "src/mesh/json-schema/utilities/caching.js"
      }
    ],
    "mediumPriority": [
      {
        "category": "Data Enrichment",
        "description": "Logic to combine and enrich product data with categories and inventory",
        "functions": [
          {
            "name": "extractOAuthCredentials",
            "purpose": "Data enrichment utility",
            "reusability": "MEDIUM",
            "complexity": "MEDIUM",
            "dependencies": [
              "Array",
              "Object"
            ],
            "usedBy": [
              "Products (main enrichment logic)"
            ]
          },
          {
            "name": "extractProductIdentifiers",
            "purpose": "Extract category IDs and SKUs from products",
            "reusability": "MEDIUM",
            "complexity": "MEDIUM",
            "dependencies": [
              "Array",
              "Object"
            ],
            "usedBy": [
              "Products (main enrichment logic)"
            ]
          },
          {
            "name": "enrichProductsWithData",
            "purpose": "Combine products with category and inventory data",
            "reusability": "MEDIUM",
            "complexity": "MEDIUM",
            "dependencies": [
              "Array",
              "Object"
            ],
            "usedBy": [
              "Products (main enrichment logic)"
            ]
          }
        ],
        "extractionPriority": "MEDIUM",
        "newLocation": "src/mesh/json-schema/utilities/enrichment.js"
      },
      {
        "category": "Performance Tracking",
        "description": "Comprehensive performance metrics and tracking",
        "functions": [
          {
            "name": "initializePerformanceTracking",
            "purpose": "Initialize performance metrics object",
            "reusability": "HIGH",
            "complexity": "LOW",
            "dependencies": [
              "Date"
            ],
            "usedBy": [
              "All resolvers"
            ]
          },
          {
            "name": "calculatePerformanceMetrics",
            "purpose": "Calculate final performance metrics",
            "reusability": "HIGH",
            "complexity": "LOW",
            "dependencies": [
              "Date"
            ],
            "usedBy": [
              "All resolvers"
            ]
          }
        ],
        "extractionPriority": "MEDIUM",
        "newLocation": "src/mesh/json-schema/utilities/performance.js"
      }
    ],
    "totalFunctions": 10
  },
  "sourceResolvers": {
    "count": 3,
    "averageComplexity": 1.6666666666666667,
    "sharedDependencies": [
      "OAuth utilities",
      "HTTP client",
      "Performance tracking",
      "Error handling"
    ]
  },
  "orchestrationChanges": {
    "currentApproach": "Single monolithic resolver",
    "newApproach": "Source-specific resolvers with shared utilities",
    "benefitsExpected": [
      "Improved maintainability",
      "Better separation of concerns",
      "Easier testing",
      "Clearer configuration",
      "Source-specific error handling"
    ]
  },
  "migrationStrategy": {
    "step1": "Extract shared utilities (OAuth, caching, performance)",
    "step2": "Create products resolver with extracted utilities",
    "step3": "Create categories resolver with caching",
    "step4": "Create inventory resolver with admin token auth",
    "step5": "Update mesh configuration to use JSON Schema sources",
    "step6": "Test and validate parity with monolithic resolver"
  }
}