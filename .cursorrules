# Adobe App Builder - Refactor Branch

## üö® REFACTORING IN PROGRESS
This branch is migrating to Adobe App Builder standard patterns. 
**Follow Adobe standards, ignore legacy patterns.**

## Adobe Standard Action Pattern

### ‚úÖ CORRECT: Adobe Standard
```javascript
const { Core } = require('@adobe/aio-sdk');
const { errorResponse, checkMissingRequestInputs } = require('../utils');

async function main(params) {
  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' });
  
  try {
    // Simple validation using Adobe utilities
    const requiredParams = ['COMMERCE_ADMIN_USERNAME'];
    const errorMessage = checkMissingRequestInputs(params, requiredParams);
    if (errorMessage) return errorResponse(400, errorMessage, logger);
    
    // Business logic here
    const result = await doBusinessLogic(params);
    
    return {
      statusCode: 200,
      body: result
    };
  } catch (error) {
    logger.error(error);
    return errorResponse(500, 'server error', logger);
  }
}

exports.main = main;
```

### ‚ùå WRONG: Legacy Patterns (Being Removed)
```javascript
// DON'T USE: Action factories (being removed)
const { createAction } = require('../../src/core/action/operations/action-factory');

// DON'T USE: Complex step orchestration (being simplified)
module.exports = createAction(businessLogic, { /* config */ });
```

## Commerce Integration

### ‚úÖ CORRECT: Admin Token Authentication
```javascript
async function getAdminToken(params) {
  const response = await fetch(`${baseUrl}/rest/V1/integration/admin/token`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      username: params.COMMERCE_ADMIN_USERNAME,
      password: params.COMMERCE_ADMIN_PASSWORD
    })
  });
  return response.json();
}
```

### ‚ùå WRONG: OAuth References (Incorrect)
- No OAuth 1.0 - use admin token authentication
- No custom OAuth implementations
- No complex authentication orchestration

## Configuration

### ‚úÖ CORRECT: Simple Configuration
```javascript
const config = {
  commerce: {
    baseUrl: process.env.COMMERCE_BASE_URL || params.COMMERCE_BASE_URL
  }
};
```

### ‚ùå WRONG: Complex Configuration (Being Removed)
- No domain-driven config files
- No complex validation systems
- No config override mapping

## File Operations

### ‚úÖ CORRECT: Direct Adobe SDK
```javascript
const { init } = require('@adobe/aio-lib-files');

async function storeFile(content, fileName) {
  const files = await init();
  await files.write(fileName, content);
  return files.generatePresignedGETURL(fileName);
}
```

### ‚ùå WRONG: Strategy Patterns (Being Removed)
- No storage strategy abstractions
- No file operation wrappers
- No complex provider switching

## API Mesh

### ‚úÖ CORRECT: Direct GraphQL
```javascript
const { GraphQLClient, gql } = require('graphql-request');

const client = new GraphQLClient(endpoint);
const data = await client.request(gql`query { ... }`);
```

### ‚ùå WRONG: Custom Abstractions (Being Removed)
- No query builders
- No mesh integration abstractions
- No custom GraphQL wrappers

## What to Keep (Valuable Business Logic)
- ‚úÖ `buildProducts()` transformation logic
- ‚úÖ `createCsv()` generation
- ‚úÖ Product processing utilities
- ‚úÖ HTMX frontend patterns
- ‚úÖ Mesh resolvers (working well)

## Commands
```bash
npm run deploy          # Deploy to staging
npm run test:action     # Test actions
npm run lint           # Code quality
```

## Architecture (After Refactoring)
```
actions/
‚îú‚îÄ‚îÄ utils.js           # Adobe standard utilities
‚îú‚îÄ‚îÄ get-products/      # Simplified actions
‚îî‚îÄ‚îÄ ...

src/
‚îú‚îÄ‚îÄ config.js         # Single config file
‚îú‚îÄ‚îÄ commerce.js       # Direct API calls
‚îú‚îÄ‚îÄ storage.js        # Direct Adobe SDK
‚îî‚îÄ‚îÄ products/         # Keep business logic
```

---
**This refactor removes 80% of the codebase complexity while maintaining all functionality.**