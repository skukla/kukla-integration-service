/* eslint-disable */
// API Mesh resolver - DO NOT EDIT THIS FILE
// This file is auto-generated by scripts/generate-mesh-resolver.js

// Load the auto-generated configuration
const config = {
  runtime: {
    actionUrl:
      'https://285361-188maroonwallaby-stage.adobeioruntime.net/api/v1/web/kukla-integration-service/get-products',
  },
  commerce: {
    baseUrl: 'https://citisignal-com774.adobedemo.com',
    paths: {
      products: '/products',
    },
  },
  mesh: {
    timeout: 30000,
    retries: 3,
  },
};

module.exports = {
  resolvers: {
    Query: {
      mesh_products_full: {
        resolve: async (parent, args, context) => {
          try {
            // Get credentials from headers
            const username = context.headers['x-commerce-username'];
            const password = context.headers['x-commerce-password'];

            if (!username || !password) {
              throw new Error('Commerce credentials not provided');
            }

            // Construct URL for internal get-products action
            const actionUrl = config.runtime.actionUrl + '?format=json';

            // Call existing REST action via HTTP
            const restResponse = await fetch(actionUrl, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                // Pass the credentials in custom headers
                'x-commerce-username': username,
                'x-commerce-password': password,
              },
            });

            if (!restResponse.ok) {
              const errorText = await restResponse.text();
              throw new Error(
                'Commerce API request failed: ' + restResponse.status + ' ' + errorText
              );
            }

            const data = await restResponse.json();
            return {
              products: data.products || [],
              total_count: data.total_count || 0,
              message: 'Success via HTTP bridge',
              status: 'success',
            };
          } catch (error) {
            return {
              products: [],
              total_count: 0,
              message: error.message,
              status: 'error',
            };
          }
        },
      },
    },
  },
};
